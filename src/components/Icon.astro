---
import { icons as lucideIconsJSON } from '@iconify-json/lucide';
import { icons as simpleIconsJSON } from '@iconify-json/simple-icons';
import type { icons as lucideIcons } from '@iconify-json/lucide/icons.json';
import type { icons as simpleIcons } from '@iconify-json/simple-icons/icons.json';
import { icons as coreuiIconsJSON } from '@iconify-json/cib';
import type { icons as coreuiIcons } from '@iconify-json/cib/icons.json';
import { getIconData, iconToSVG, replaceIDs } from '@iconify/utils';
import { AstroError } from 'astro/errors';
import type { HTMLAttributes } from 'astro/types';


interface SVGAttributes extends HTMLAttributes<'svg'> {
	// biome-ignore lint/suspicious/noExplicitAny: Allow any string index
	[key: string]: any;
}

interface LucideProps extends HTMLAttributes<'svg'> {
	type: 'lucide';
	name: keyof typeof lucideIcons;
}

interface SimpleIconsProps extends HTMLAttributes<'svg'> {
	type: 'simple-icons';
	name: keyof typeof simpleIcons;
}

interface CoreUIProps extends HTMLAttributes<'svg'> {
	type: 'coreui';
	name: keyof typeof coreuiIcons;
}

type Props = LucideProps | SimpleIconsProps | CoreUIProps;

const { type, name, ...props } = Astro.props;
const attributes = props as SVGAttributes;

if (type !== 'lucide' && type !== 'simple-icons' && type !== 'coreui') {
	throw new AstroError(`Invalid icon type "${type}"`);
}

// biome-ignore lint/suspicious/noExplicitAny: Needed type not exported
let iconData: any;

if (type === 'lucide') {
	iconData = getIconData(lucideIconsJSON, name);
} else if (type === 'simple-icons') {
	iconData = getIconData(simpleIconsJSON, name);
} else if (type === 'coreui') {
	iconData = getIconData(coreuiIconsJSON, name);
}

if (!iconData) {
	throw new AstroError(`Icon "${name}" is missing`);
}

const renderData = iconToSVG(iconData, {
	height: attributes.height || 24,
	width: attributes.width || 24,
});

const body = replaceIDs(renderData.body);

let renderAttribsHTML =
	body.indexOf('xlink:') === -1 ? '' : ' xmlns:xlink="http://www.w3.org/1999/xlink"';

for (const attr in attributes) {
	renderAttribsHTML += ` ${attr}="${attributes[attr]}"`;
}

const svg = `<svg xmlns="http://www.w3.org/2000/svg"${renderAttribsHTML}>${body}</svg>`;
---

<Fragment set:html={svg} />